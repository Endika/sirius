//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


QueryType = function(args) {
  this.ASR = null;
  this.QA = null;
  this.IMM = null;
  if (args) {
    if (args.ASR !== undefined) {
      this.ASR = args.ASR;
    }
    if (args.QA !== undefined) {
      this.QA = args.QA;
    }
    if (args.IMM !== undefined) {
      this.IMM = args.IMM;
    }
  }
};
QueryType.prototype = {};
QueryType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.ASR = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.QA = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.IMM = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryType.prototype.write = function(output) {
  output.writeStructBegin('QueryType');
  if (this.ASR !== null && this.ASR !== undefined) {
    output.writeFieldBegin('ASR', Thrift.Type.BOOL, 1);
    output.writeBool(this.ASR);
    output.writeFieldEnd();
  }
  if (this.QA !== null && this.QA !== undefined) {
    output.writeFieldBegin('QA', Thrift.Type.BOOL, 2);
    output.writeBool(this.QA);
    output.writeFieldEnd();
  }
  if (this.IMM !== null && this.IMM !== undefined) {
    output.writeFieldBegin('IMM', Thrift.Type.BOOL, 3);
    output.writeBool(this.IMM);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryData = function(args) {
  this.audioData = '';
  this.audioFormat = '';
  this.audioB64Encoding = false;
  this.imgData = '';
  this.imgFormat = '';
  this.imgB64Encoding = false;
  this.textData = '';
  if (args) {
    if (args.audioData !== undefined) {
      this.audioData = args.audioData;
    }
    if (args.audioFormat !== undefined) {
      this.audioFormat = args.audioFormat;
    }
    if (args.audioB64Encoding !== undefined) {
      this.audioB64Encoding = args.audioB64Encoding;
    }
    if (args.imgData !== undefined) {
      this.imgData = args.imgData;
    }
    if (args.imgFormat !== undefined) {
      this.imgFormat = args.imgFormat;
    }
    if (args.imgB64Encoding !== undefined) {
      this.imgB64Encoding = args.imgB64Encoding;
    }
    if (args.textData !== undefined) {
      this.textData = args.textData;
    }
  }
};
QueryData.prototype = {};
QueryData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.audioData = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.audioFormat = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.audioB64Encoding = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.imgData = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.imgFormat = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.imgB64Encoding = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.textData = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryData.prototype.write = function(output) {
  output.writeStructBegin('QueryData');
  if (this.audioData !== null && this.audioData !== undefined) {
    output.writeFieldBegin('audioData', Thrift.Type.STRING, 1);
    output.writeString(this.audioData);
    output.writeFieldEnd();
  }
  if (this.audioFormat !== null && this.audioFormat !== undefined) {
    output.writeFieldBegin('audioFormat', Thrift.Type.STRING, 2);
    output.writeString(this.audioFormat);
    output.writeFieldEnd();
  }
  if (this.audioB64Encoding !== null && this.audioB64Encoding !== undefined) {
    output.writeFieldBegin('audioB64Encoding', Thrift.Type.BOOL, 3);
    output.writeBool(this.audioB64Encoding);
    output.writeFieldEnd();
  }
  if (this.imgData !== null && this.imgData !== undefined) {
    output.writeFieldBegin('imgData', Thrift.Type.STRING, 4);
    output.writeString(this.imgData);
    output.writeFieldEnd();
  }
  if (this.imgFormat !== null && this.imgFormat !== undefined) {
    output.writeFieldBegin('imgFormat', Thrift.Type.STRING, 5);
    output.writeString(this.imgFormat);
    output.writeFieldEnd();
  }
  if (this.imgB64Encoding !== null && this.imgB64Encoding !== undefined) {
    output.writeFieldBegin('imgB64Encoding', Thrift.Type.BOOL, 6);
    output.writeBool(this.imgB64Encoding);
    output.writeFieldEnd();
  }
  if (this.textData !== null && this.textData !== undefined) {
    output.writeFieldBegin('textData', Thrift.Type.STRING, 7);
    output.writeString(this.textData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

