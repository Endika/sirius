//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./filetransfer_svc_types');
//HELPER FUNCTIONS AND STRUCTURES

FileTransferSvc_ping_args = function(args) {
};
FileTransferSvc_ping_args.prototype = {};
FileTransferSvc_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileTransferSvc_ping_args.prototype.write = function(output) {
  output.writeStructBegin('FileTransferSvc_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileTransferSvc_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileTransferSvc_ping_result.prototype = {};
FileTransferSvc_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileTransferSvc_ping_result.prototype.write = function(output) {
  output.writeStructBegin('FileTransferSvc_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileTransferSvc_send_file_args = function(args) {
  this.data = null;
  this.qType = null;
  this.uuid = null;
  if (args) {
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.qType !== undefined) {
      this.qType = args.qType;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
  }
};
FileTransferSvc_send_file_args.prototype = {};
FileTransferSvc_send_file_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.QueryData();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.qType = new ttypes.QueryType();
        this.qType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileTransferSvc_send_file_args.prototype.write = function(output) {
  output.writeStructBegin('FileTransferSvc_send_file_args');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);
    this.data.write(output);
    output.writeFieldEnd();
  }
  if (this.qType !== null && this.qType !== undefined) {
    output.writeFieldBegin('qType', Thrift.Type.STRUCT, 2);
    this.qType.write(output);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 3);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileTransferSvc_send_file_result = function(args) {
};
FileTransferSvc_send_file_result.prototype = {};
FileTransferSvc_send_file_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileTransferSvc_send_file_result.prototype.write = function(output) {
  output.writeStructBegin('FileTransferSvc_send_file_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileTransferSvc_get_response_args = function(args) {
  this.uuid = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
  }
};
FileTransferSvc_get_response_args.prototype = {};
FileTransferSvc_get_response_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileTransferSvc_get_response_args.prototype.write = function(output) {
  output.writeStructBegin('FileTransferSvc_get_response_args');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileTransferSvc_get_response_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FileTransferSvc_get_response_result.prototype = {};
FileTransferSvc_get_response_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileTransferSvc_get_response_result.prototype.write = function(output) {
  output.writeStructBegin('FileTransferSvc_get_response_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileTransferSvcClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
FileTransferSvcClient.prototype = {};
FileTransferSvcClient.prototype.seqid = function() { return this._seqid; }
FileTransferSvcClient.prototype.new_seqid = function() { return this._seqid += 1; }
FileTransferSvcClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

FileTransferSvcClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
  var args = new FileTransferSvc_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileTransferSvcClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileTransferSvc_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ping failed: unknown result');
};
FileTransferSvcClient.prototype.send_file = function(data, qType, uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_send_file(data, qType, uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_send_file(data, qType, uuid);
  }
};

FileTransferSvcClient.prototype.send_send_file = function(data, qType, uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('send_file', Thrift.MessageType.CALL, this.seqid());
  var args = new FileTransferSvc_send_file_args();
  args.data = data;
  args.qType = qType;
  args.uuid = uuid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileTransferSvcClient.prototype.recv_send_file = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileTransferSvc_send_file_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
FileTransferSvcClient.prototype.get_response = function(uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_response(uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_response(uuid);
  }
};

FileTransferSvcClient.prototype.send_get_response = function(uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_response', Thrift.MessageType.CALL, this.seqid());
  var args = new FileTransferSvc_get_response_args();
  args.uuid = uuid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FileTransferSvcClient.prototype.recv_get_response = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FileTransferSvc_get_response_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_response failed: unknown result');
};
FileTransferSvcProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
FileTransferSvcProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

FileTransferSvcProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new FileTransferSvc_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping)
      .then(function(result) {
        var result = new FileTransferSvc_ping_result({success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ping(function (err, result) {
      if (err == null) {
        var result = new FileTransferSvc_ping_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileTransferSvcProcessor.prototype.process_send_file = function(seqid, input, output) {
  var args = new FileTransferSvc_send_file_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.send_file.length === 3) {
    Q.fcall(this._handler.send_file, args.data, args.qType, args.uuid)
      .then(function(result) {
        var result = new FileTransferSvc_send_file_result({success: result});
        output.writeMessageBegin("send_file", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("send_file", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.send_file(args.data, args.qType, args.uuid, function (err, result) {
      if (err == null) {
        var result = new FileTransferSvc_send_file_result((err != null ? err : {success: result}));
        output.writeMessageBegin("send_file", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("send_file", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

FileTransferSvcProcessor.prototype.process_get_response = function(seqid, input, output) {
  var args = new FileTransferSvc_get_response_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_response.length === 1) {
    Q.fcall(this._handler.get_response, args.uuid)
      .then(function(result) {
        var result = new FileTransferSvc_get_response_result({success: result});
        output.writeMessageBegin("get_response", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_response", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_response(args.uuid, function (err, result) {
      if (err == null) {
        var result = new FileTransferSvc_get_response_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_response", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_response", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

