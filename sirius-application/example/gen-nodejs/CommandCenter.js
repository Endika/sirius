//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./commandcenter_types');
//HELPER FUNCTIONS AND STRUCTURES

CommandCenter_registerService_args = function(args) {
  this.serviceType = null;
  this.mDataObj = null;
  if (args) {
    if (args.serviceType !== undefined) {
      this.serviceType = args.serviceType;
    }
    if (args.mDataObj !== undefined) {
      this.mDataObj = args.mDataObj;
    }
  }
};
CommandCenter_registerService_args.prototype = {};
CommandCenter_registerService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mDataObj = new ttypes.MachineData();
        this.mDataObj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_registerService_args.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_registerService_args');
  if (this.serviceType !== null && this.serviceType !== undefined) {
    output.writeFieldBegin('serviceType', Thrift.Type.STRING, 1);
    output.writeString(this.serviceType);
    output.writeFieldEnd();
  }
  if (this.mDataObj !== null && this.mDataObj !== undefined) {
    output.writeFieldBegin('mDataObj', Thrift.Type.STRUCT, 2);
    this.mDataObj.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_registerService_result = function(args) {
};
CommandCenter_registerService_result.prototype = {};
CommandCenter_registerService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_registerService_result.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_registerService_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_handleRequest_args = function(args) {
  this.qTypeObj = null;
  this.data = null;
  if (args) {
    if (args.qTypeObj !== undefined) {
      this.qTypeObj = args.qTypeObj;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
CommandCenter_handleRequest_args.prototype = {};
CommandCenter_handleRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.qTypeObj = new ttypes.QueryType();
        this.qTypeObj.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.QueryData();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_handleRequest_args.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_handleRequest_args');
  if (this.qTypeObj !== null && this.qTypeObj !== undefined) {
    output.writeFieldBegin('qTypeObj', Thrift.Type.STRUCT, 1);
    this.qTypeObj.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 2);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_handleRequest_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CommandCenter_handleRequest_result.prototype = {};
CommandCenter_handleRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_handleRequest_result.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_handleRequest_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_askTextQuestion_args = function(args) {
  this.question = null;
  if (args) {
    if (args.question !== undefined) {
      this.question = args.question;
    }
  }
};
CommandCenter_askTextQuestion_args.prototype = {};
CommandCenter_askTextQuestion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.question = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_askTextQuestion_args.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_askTextQuestion_args');
  if (this.question !== null && this.question !== undefined) {
    output.writeFieldBegin('question', Thrift.Type.STRING, 1);
    output.writeString(this.question);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_askTextQuestion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CommandCenter_askTextQuestion_result.prototype = {};
CommandCenter_askTextQuestion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_askTextQuestion_result.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_askTextQuestion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_ping_args = function(args) {
};
CommandCenter_ping_args.prototype = {};
CommandCenter_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_ping_args.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenter_ping_result = function(args) {
};
CommandCenter_ping_result.prototype = {};
CommandCenter_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandCenter_ping_result.prototype.write = function(output) {
  output.writeStructBegin('CommandCenter_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandCenterClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CommandCenterClient.prototype = {};
CommandCenterClient.prototype.seqid = function() { return this._seqid; }
CommandCenterClient.prototype.new_seqid = function() { return this._seqid += 1; }
CommandCenterClient.prototype.registerService = function(serviceType, mDataObj, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerService(serviceType, mDataObj);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerService(serviceType, mDataObj);
  }
};

CommandCenterClient.prototype.send_registerService = function(serviceType, mDataObj) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerService', Thrift.MessageType.CALL, this.seqid());
  var args = new CommandCenter_registerService_args();
  args.serviceType = serviceType;
  args.mDataObj = mDataObj;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommandCenterClient.prototype.recv_registerService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommandCenter_registerService_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
CommandCenterClient.prototype.handleRequest = function(qTypeObj, data, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_handleRequest(qTypeObj, data);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_handleRequest(qTypeObj, data);
  }
};

CommandCenterClient.prototype.send_handleRequest = function(qTypeObj, data) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('handleRequest', Thrift.MessageType.CALL, this.seqid());
  var args = new CommandCenter_handleRequest_args();
  args.qTypeObj = qTypeObj;
  args.data = data;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommandCenterClient.prototype.recv_handleRequest = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommandCenter_handleRequest_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('handleRequest failed: unknown result');
};
CommandCenterClient.prototype.askTextQuestion = function(question, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_askTextQuestion(question);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_askTextQuestion(question);
  }
};

CommandCenterClient.prototype.send_askTextQuestion = function(question) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('askTextQuestion', Thrift.MessageType.CALL, this.seqid());
  var args = new CommandCenter_askTextQuestion_args();
  args.question = question;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommandCenterClient.prototype.recv_askTextQuestion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommandCenter_askTextQuestion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('askTextQuestion failed: unknown result');
};
CommandCenterClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

CommandCenterClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
  var args = new CommandCenter_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommandCenterClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommandCenter_ping_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
CommandCenterProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
CommandCenterProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

CommandCenterProcessor.prototype.process_registerService = function(seqid, input, output) {
  var args = new CommandCenter_registerService_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerService.length === 2) {
    Q.fcall(this._handler.registerService, args.serviceType, args.mDataObj)
      .then(function(result) {
        var result = new CommandCenter_registerService_result({success: result});
        output.writeMessageBegin("registerService", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CommandCenter_registerService_result(err);
        output.writeMessageBegin("registerService", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerService(args.serviceType, args.mDataObj,  function (err, result) {
      var result = new CommandCenter_registerService_result((err != null ? err : {success: result}));
      output.writeMessageBegin("registerService", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommandCenterProcessor.prototype.process_handleRequest = function(seqid, input, output) {
  var args = new CommandCenter_handleRequest_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.handleRequest.length === 2) {
    Q.fcall(this._handler.handleRequest, args.qTypeObj, args.data)
      .then(function(result) {
        var result = new CommandCenter_handleRequest_result({success: result});
        output.writeMessageBegin("handleRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CommandCenter_handleRequest_result(err);
        output.writeMessageBegin("handleRequest", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.handleRequest(args.qTypeObj, args.data,  function (err, result) {
      var result = new CommandCenter_handleRequest_result((err != null ? err : {success: result}));
      output.writeMessageBegin("handleRequest", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommandCenterProcessor.prototype.process_askTextQuestion = function(seqid, input, output) {
  var args = new CommandCenter_askTextQuestion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.askTextQuestion.length === 1) {
    Q.fcall(this._handler.askTextQuestion, args.question)
      .then(function(result) {
        var result = new CommandCenter_askTextQuestion_result({success: result});
        output.writeMessageBegin("askTextQuestion", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CommandCenter_askTextQuestion_result(err);
        output.writeMessageBegin("askTextQuestion", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.askTextQuestion(args.question,  function (err, result) {
      var result = new CommandCenter_askTextQuestion_result((err != null ? err : {success: result}));
      output.writeMessageBegin("askTextQuestion", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

CommandCenterProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new CommandCenter_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping)
      .then(function(result) {
        var result = new CommandCenter_ping_result({success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new CommandCenter_ping_result(err);
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ping( function (err, result) {
      var result = new CommandCenter_ping_result((err != null ? err : {success: result}));
      output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

