//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


QueryType = function(args) {
  this.ASR = null;
  this.QA = null;
  this.IMM = null;
  if (args) {
    if (args.ASR !== undefined) {
      this.ASR = args.ASR;
    }
    if (args.QA !== undefined) {
      this.QA = args.QA;
    }
    if (args.IMM !== undefined) {
      this.IMM = args.IMM;
    }
  }
};
QueryType.prototype = {};
QueryType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.ASR = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.QA = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.IMM = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryType.prototype.write = function(output) {
  output.writeStructBegin('QueryType');
  if (this.ASR !== null && this.ASR !== undefined) {
    output.writeFieldBegin('ASR', Thrift.Type.BOOL, 1);
    output.writeBool(this.ASR);
    output.writeFieldEnd();
  }
  if (this.QA !== null && this.QA !== undefined) {
    output.writeFieldBegin('QA', Thrift.Type.BOOL, 2);
    output.writeBool(this.QA);
    output.writeFieldEnd();
  }
  if (this.IMM !== null && this.IMM !== undefined) {
    output.writeFieldBegin('IMM', Thrift.Type.BOOL, 3);
    output.writeBool(this.IMM);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

File = function(args) {
  this.file = '';
  this.b64format = false;
  if (args) {
    if (args.file !== undefined) {
      this.file = args.file;
    }
    if (args.b64format !== undefined) {
      this.b64format = args.b64format;
    }
  }
};
File.prototype = {};
File.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.b64format = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

File.prototype.write = function(output) {
  output.writeStructBegin('File');
  if (this.file !== null && this.file !== undefined) {
    output.writeFieldBegin('file', Thrift.Type.STRING, 1);
    output.writeString(this.file);
    output.writeFieldEnd();
  }
  if (this.b64format !== null && this.b64format !== undefined) {
    output.writeFieldBegin('b64format', Thrift.Type.BOOL, 2);
    output.writeBool(this.b64format);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryData = function(args) {
  this.audioFile = null;
  this.textFile = null;
  this.imgFile = null;
  if (args) {
    if (args.audioFile !== undefined) {
      this.audioFile = args.audioFile;
    }
    if (args.textFile !== undefined) {
      this.textFile = args.textFile;
    }
    if (args.imgFile !== undefined) {
      this.imgFile = args.imgFile;
    }
  }
};
QueryData.prototype = {};
QueryData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioFile = new File();
        this.audioFile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.textFile = new File();
        this.textFile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.imgFile = new File();
        this.imgFile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryData.prototype.write = function(output) {
  output.writeStructBegin('QueryData');
  if (this.audioFile !== null && this.audioFile !== undefined) {
    output.writeFieldBegin('audioFile', Thrift.Type.STRUCT, 1);
    this.audioFile.write(output);
    output.writeFieldEnd();
  }
  if (this.textFile !== null && this.textFile !== undefined) {
    output.writeFieldBegin('textFile', Thrift.Type.STRUCT, 2);
    this.textFile.write(output);
    output.writeFieldEnd();
  }
  if (this.imgFile !== null && this.imgFile !== undefined) {
    output.writeFieldBegin('imgFile', Thrift.Type.STRUCT, 3);
    this.imgFile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

